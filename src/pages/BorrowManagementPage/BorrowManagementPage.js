import React, { useState, useEffect} from 'react';
import '../../styles/design-system.css';
import styles from './BorrowManagementPage.module.css';
import BookIcon from '@mui/icons-material/Book';
import HourglassEmptyIcon from '@mui/icons-material/HourglassEmpty';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import CancelIcon from '@mui/icons-material/Cancel';
import WarningIcon from '@mui/icons-material/Warning';
import RefreshIcon from '@mui/icons-material/Refresh';
import InfoIcon from '@mui/icons-material/Info';
import AccessTimeIcon from '@mui/icons-material/AccessTime';
import MonetizationOnIcon from '@mui/icons-material/MonetizationOn';
import RuleIcon from '@mui/icons-material/Rule';
import UserApi from '../../api/UserApi';
import { useUser } from '../../contexts/UserContext'; 
import Book from '../../components/TransactionBook/TransactionBook'; 

const BorrowManagementPage = () => {
  const [selectedTab, setSelectedTab] = useState('PENDING');
  const { user } = useUser();
  const [books, setBooks] = useState([]);
  const [loading, setLoading] = useState(false);
  const [stats, setStats] = useState({
    PENDING: 0,
    BORROWED: 0,
    RETURNED: 0,
    CANCELLED: 0,
    OVERDUE: 0
  });

  // H√†m g·ªçi API t∆∞∆°ng ·ª©ng theo tr·∫°ng th√°i
  const fetchBooksByTab = async () => {
    setLoading(true);
    try {
      // Use unified API call with status filter
      const response = await UserApi.getTransactionsByStatus(user.userId, selectedTab);
      
      const fetchedBooks = response.data.map((transaction) => ({
        transactionId: transaction.transactionId,
        book: transaction.book,
        borrowDate: transaction.borrowDate,
        dueDate: transaction.dueDate,
        returnDate: transaction.returnDate,
        pickupDeadline: transaction.pickupDeadline,
        overdueFee: transaction.overdueFee,
        status: transaction.status,
      }));
      setBooks(fetchedBooks);
    } catch (error) {
      console.error('Error fetching books:', error);
      setBooks([]);
    } finally {
      setLoading(false);
    }
  };

  // Fetch statistics for all tabs
  const fetchStats = async () => {
    try {
      const [pendingRes, borrowedRes, returnedRes, cancelledRes, overdueRes] = await Promise.all([
        UserApi.getTransactionsByStatus(user.userId, 'PENDING'),
        UserApi.getTransactionsByStatus(user.userId, 'BORROWED'),
        UserApi.getTransactionsByStatus(user.userId, 'RETURNED'),
        UserApi.getTransactionsByStatus(user.userId, 'CANCELLED'),
        UserApi.getTransactionsByStatus(user.userId, 'OVERDUE')
      ]);
      
      setStats({
        PENDING: pendingRes.data.length,
        BORROWED: borrowedRes.data.length,
        RETURNED: returnedRes.data.length,
        CANCELLED: cancelledRes.data.length,
        OVERDUE: overdueRes.data.length
      });
    } catch (error) {
      console.error('Error fetching stats:', error);
    }
  };

  const handleRefresh = () => {
    fetchBooksByTab();
    fetchStats();
  };

  // G·ªçi API khi thay ƒë·ªïi tab
  useEffect(() => {
    if (user?.userId) {
    fetchBooksByTab();
      fetchStats();
    }
  }, [selectedTab, user?.userId]);

  const tabConfig = [
    { 
      label: 'Ch·ªù nh·∫≠n s√°ch', 
      value: 'PENDING', 
      Icon: HourglassEmptyIcon,
      description: 'Y√™u c·∫ßu m∆∞·ª£n s√°ch ƒëang ch·ªù nh·∫≠n t·∫°i th∆∞ vi·ªán',
      color: 'warning'
    },
    { 
      label: 'ƒêang m∆∞·ª£n', 
      value: 'BORROWED', 
      Icon: BookIcon,
      description: 'S√°ch b·∫°n ƒëang m∆∞·ª£n',
      color: 'primary'
    },
    { 
      label: 'ƒê√£ tr·∫£', 
      value: 'RETURNED', 
      Icon: CheckCircleIcon,
      description: 'L·ªãch s·ª≠ s√°ch ƒë√£ tr·∫£',
      color: 'success'
    },
    { 
      label: 'ƒê√£ h·ªßy', 
      value: 'CANCELLED', 
      Icon: CancelIcon,
      description: 'Giao d·ªãch b·ªã h·ªßy do qu√° h·∫°n nh·∫≠n s√°ch',
      color: 'error'
    },
    { 
      label: 'Qu√° h·∫°n', 
      value: 'OVERDUE', 
      Icon: WarningIcon,
      description: 'S√°ch ƒë√£ qu√° h·∫°n tr·∫£',
      color: 'error'
    },
  ];

  const currentTab = tabConfig.find(tab => tab.value === selectedTab);

  const borrowingPolicies = [
    {
      icon: <BookIcon />,
      title: "S·ªë l∆∞·ª£ng m∆∞·ª£n t·ªëi ƒëa",
      description: "M·ªói ƒë·ªôc gi·∫£ ƒë∆∞·ª£c m∆∞·ª£n t·ªëi ƒëa 5 cu·ªën s√°ch c√πng m·ªôt l√∫c",
      details: "Bao g·ªìm c·∫£ s√°ch gi√°o khoa v√† s√°ch tham kh·∫£o"
    },
    {
      icon: <AccessTimeIcon />,
      title: "Th·ªùi gian m∆∞·ª£n",
      description: "Th·ªùi gian m∆∞·ª£n s√°ch l√† 14 ng√†y k·ªÉ t·ª´ ng√†y m∆∞·ª£n",
      details: "C√≥ th·ªÉ gia h·∫°n th√™m 7 ng√†y n·∫øu kh√¥ng c√≥ ng∆∞·ªùi ƒë·∫∑t tr∆∞·ªõc"
    },
    {
      icon: <MonetizationOnIcon />,
      title: "Ph√≠ ph·∫°t tr·ªÖ h·∫°n",
      description: "Ph√≠ ph·∫°t 5.000 VNƒê/ng√†y cho m·ªói cu·ªën s√°ch tr·∫£ tr·ªÖ",
      details: "T√≠nh t·ª´ ng√†y h·∫øt h·∫°n ƒë·∫øn ng√†y tr·∫£ s√°ch th·ª±c t·∫ø"
    },
    {
      icon: <RuleIcon />,
      title: "Quy ƒë·ªãnh b·∫£o qu·∫£n",
      description: "Gi·ªØ g√¨n s√°ch s·∫°ch s·∫Ω, kh√¥ng l√†m h·ªèng ho·∫∑c m·∫•t s√°ch",
      details: "N·∫øu l√†m h·ªèng s·∫Ω ph·∫£i b·ªìi th∆∞·ªùng theo gi√° tr·ªã s√°ch"
    }
  ];

  return (
    <div className={styles.container}>
      {/* Header Section */}
      <div className={styles.headerSection}>
        <div className={styles.titleContainer}>
          <h1 className={styles.pageTitle}>
            <span className={styles.titleIcon}>üìö</span>
            Qu·∫£n L√Ω M∆∞·ª£n S√°ch
          </h1>
          <p className={styles.pageSubtitle}>
            Theo d√µi v√† qu·∫£n l√Ω t·∫•t c·∫£ c√°c giao d·ªãch m∆∞·ª£n s√°ch c·ªßa b·∫°n
          </p>
        </div>
      </div>

      {/* Borrowing Policy Section */}
      <div className={styles.policySection}>
        <div className={styles.policyHeader}>
          <h2 className={styles.policyTitle}>
            <InfoIcon className={styles.policyIcon} />
            Ch√≠nh S√°ch M∆∞·ª£n S√°ch
          </h2>
          <p className={styles.policySubtitle}>
            Vui l√≤ng ƒë·ªçc k·ªπ c√°c quy ƒë·ªãnh d∆∞·ªõi ƒë√¢y ƒë·ªÉ ƒë·∫£m b·∫£o vi·ªác m∆∞·ª£n s√°ch di·ªÖn ra thu·∫≠n l·ª£i
          </p>
        </div>
        
        <div className={styles.policyGrid}>
          {borrowingPolicies.map((policy, index) => (
            <div key={index} className={styles.policyCard}>
              <div className={styles.policyCardIcon}>
                {policy.icon}
              </div>
              <div className={styles.policyCardContent}>
                <h3 className={styles.policyCardTitle}>{policy.title}</h3>
                <p className={styles.policyCardDescription}>{policy.description}</p>
                <p className={styles.policyCardDetails}>{policy.details}</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Stats Overview */}
      {/* <div className={styles.statsSection}>
        {tabConfig.map(({ label, value, Icon, color }) => (
          <div key={value} className={`${styles.statCard} ${styles[color]}`}>
            <div className={styles.statIcon}>
              <Icon />
            </div>
            <div className={styles.statContent}>
              <div className={styles.statNumber}>{stats[value]}</div>
              <div className={styles.statLabel}>{label}</div>
            </div>
          </div>
        ))}
      </div> */}

      {/* Main Content */}
      <div className={styles.mainContent}>
        {/* Tab Navigation */}
        <div className={styles.tabNavigation}>
          {tabConfig.map(({ label, value, Icon, description, color }) => (
          <button
            key={value}
              className={`${styles.tabButton} ${selectedTab === value ? styles.activeTab : ''} ${styles[color]}`}
            onClick={() => setSelectedTab(value)}
          >
              <div className={styles.tabIcon}>
                <Icon />
              </div>
              <div className={styles.tabContent}>
                <div className={styles.tabLabel}>{label}</div>
                <div className={styles.tabDescription}>{description}</div>
                <div className={styles.tabCount}>{stats[value]} cu·ªën</div>
              </div>
          </button>
        ))}
      </div>

        {/* Content Area */}
        <div className={styles.contentArea}>
          <div className={styles.contentHeader}>
            <h2 className={styles.contentTitle}>
              <currentTab.Icon className={styles.contentIcon} />
              {currentTab.label}
            </h2>
            <div className={styles.contentMeta}>
              {stats[selectedTab]} cu·ªën s√°ch
            </div>
          </div>

          <div className={styles.contentBody}>
        {loading ? (
              <div className={styles.loadingContainer}>
                <div className={styles.loadingSpinner}></div>
                <p className={styles.loadingText}>ƒêang t·∫£i d·ªØ li·ªáu...</p>
              </div>
        ) : books.length > 0 ? (
              <div className={styles.bookList}>
            {books.map((transaction) => (
                <Book key={transaction.transactionId} transaction={transaction} /> 
            ))}
              </div>
        ) : (
              <div className={styles.emptyState}>
                <div className={styles.emptyIcon}>
                  <currentTab.Icon />
                </div>
                <h3 className={styles.emptyTitle}>Kh√¥ng c√≥ s√°ch n√†o</h3>
                <p className={styles.emptyDescription}>
                  {selectedTab === 'PENDING' && 'B·∫°n ch∆∞a c√≥ y√™u c·∫ßu m∆∞·ª£n s√°ch n√†o ƒëang ch·ªù nh·∫≠n t·∫°i th∆∞ vi·ªán.'}
                  {selectedTab === 'BORROWED' && 'B·∫°n hi·ªán t·∫°i kh√¥ng ƒëang m∆∞·ª£n s√°ch n√†o.'}
                  {selectedTab === 'RETURNED' && 'B·∫°n ch∆∞a tr·∫£ s√°ch n√†o.'}
                  {selectedTab === 'CANCELLED' && 'B·∫°n ch∆∞a c√≥ giao d·ªãch n√†o b·ªã h·ªßy.'}
                  {selectedTab === 'OVERDUE' && 'B·∫°n kh√¥ng c√≥ s√°ch n√†o ƒëang qu√° h·∫°n.'}
                </p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default BorrowManagementPage;
